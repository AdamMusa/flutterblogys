<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-02-04T15:17:34+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">thecodebrute</title><subtitle>Flutter EvangelistğŸ’™Dart gives me wingsğŸ’™Creator of codebruteğŸ’™Public SpeakerğŸ’™Web and Flutter developper</subtitle><entry><title type="html">Flutter Troisieme Partie</title><link href="http://localhost:4000/2021/09/17/fluter-1.html" rel="alternate" type="text/html" title="Flutter Troisieme Partie" /><published>2021-09-17T23:20:03+01:00</published><updated>2021-09-17T23:20:03+01:00</updated><id>http://localhost:4000/2021/09/17/fluter-1</id><content type="html" xml:base="http://localhost:4000/2021/09/17/fluter-1.html"><![CDATA[<p><strong>Bientot disponible</strong></p>]]></content><author><name>AdamMusa</name></author><summary type="html"><![CDATA[Bientot disponible]]></summary></entry><entry><title type="html">Flutter Deuxieme Partie</title><link href="http://localhost:4000/2021/09/17/fluter-1.html" rel="alternate" type="text/html" title="Flutter Deuxieme Partie" /><published>2021-09-17T23:20:03+01:00</published><updated>2021-09-17T23:20:03+01:00</updated><id>http://localhost:4000/2021/09/17/fluter-1</id><content type="html" xml:base="http://localhost:4000/2021/09/17/fluter-1.html"><![CDATA[<p><strong>Bientot disponible</strong></p>]]></content><author><name>AdamMusa</name></author><summary type="html"><![CDATA[Bientot disponible]]></summary></entry><entry><title type="html">Flutter PremiÃ©re Partie</title><link href="http://localhost:4000/2021/09/17/fluter-1.html" rel="alternate" type="text/html" title="Flutter PremiÃ©re Partie" /><published>2021-09-17T23:20:03+01:00</published><updated>2021-09-17T23:20:03+01:00</updated><id>http://localhost:4000/2021/09/17/fluter-1</id><content type="html" xml:base="http://localhost:4000/2021/09/17/fluter-1.html"><![CDATA[<p><strong>Bientot disponible</strong></p>]]></content><author><name>AdamMusa</name></author><summary type="html"><![CDATA[Bientot disponible]]></summary></entry><entry><title type="html">Pourquoi Null Safety ?</title><link href="http://localhost:4000/2020/10/27/Null-Safety.html" rel="alternate" type="text/html" title="Pourquoi Null Safety ?" /><published>2020-10-27T23:20:03+01:00</published><updated>2020-10-27T23:20:03+01:00</updated><id>http://localhost:4000/2020/10/27/Null-Safety</id><content type="html" xml:base="http://localhost:4000/2020/10/27/Null-Safety.html"><![CDATA[<p><img src="/assets/images/dart.png" alt="alt text" style="float:left; padding:16px;border-radius:50%;height:100px;" />
<br /> AdamMusa <a href="https://twitter.com/AdamMusaAly/">Follow</a><br />
2,Juin 2020 16min</p>

<p>Dart est un langage de type sÃ©curisÃ©. Cela signifie que lorsque vous obtenez une variable dâ€™un certain type, le compilateur peut garantir quâ€™elle est de ce type. Mais la sÃ©curitÃ© de type en soi ne garantit pas que la variable ne lâ€™est pas null.
Les erreurs nulles sont trÃ¨s courantes. Une recherche sur GitHub conduit Ã  des milliers de problÃ¨mes causÃ©s par des valeurs nulles dans le code Dart, et encore plus de milliers de commits essayant de rÃ©soudre ces problÃ¨mes.
Essayez de voir si vous pouvez repÃ©rer les problÃ¨mes de nullabilitÃ© dans lâ€™exemple de code suivant:</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart">  <span class="kt">void</span> <span class="nf">printLengths</span><span class="p">(</span><span class="kt">List</span><span class="o">&lt;</span><span class="n">File</span><span class="o">&gt;</span> <span class="n">files</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">for</span> <span class="o">(</span><span class="kd">var</span> <span class="n">file</span> <span class="k">in</span> <span class="n">files</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">print</span><span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">lengthSync</span><span class="o">());</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Cette fonction Ã©chouera certainement si elle est appelÃ©e avec null, mais il y a un deuxiÃ¨me cas Ã  considÃ©rer:</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// Error case 1: passing a null to files.</span>
  <span class="n">printLengths</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
  <span class="c1">// Error case 2: passing list of files, containing a null item.</span>
  <span class="n">printLengths</span><span class="o">([</span><span class="n">File</span><span class="o">(</span><span class="s">'filename1'</span><span class="o">),</span> <span class="n">File</span><span class="o">(</span><span class="s">'filename2'</span><span class="o">),</span> <span class="kc">null</span><span class="o">]);</span>
<span class="o">}</span></code></pre></figure>

<p><strong>Sound null safety</strong></p>

<p>Sound null safety de Dart est saine . Cela signifie que Dart est sÃ»r Ã  100% que la filesliste et les Ã©lÃ©ments quâ€™elle contient ne peuvent pas Ãªtre null dans lâ€™exemple ci-dessus. Lorsque Dart analyse votre code et dÃ©termine quâ€™une variable est non-nullable, cette variable est toujours non-nullable: si vous inspectez votre code en cours dâ€™exÃ©cution dans le dÃ©bogueur, vous verrez que la non-nullability est conservÃ©e au moment de lâ€™exÃ©cution. En revanche, certaines autres implÃ©mentations sont dÃ©fectueuses et, dans de nombreux cas, doivent encore effectuer des vÃ©rifications nulles Ã  lâ€™exÃ©cution. Dart partage Null Safety avec Swift, mais pas beaucoup dâ€™autres langages de programmation.
La soliditÃ© de Sound null safety de Dart a une autre implication bienvenue: cela signifie que vos programmes peuvent Ãªtre plus petits et plus rapides. Parce que Dart est vraiment sÃ»r que ce files nâ€™est jamais le cas null, Dart peut optimiser. Par exemple, le compilateur Dart ahead-of-time (AOT) peut produire du code natif plus petit et plus rapide, car il nâ€™a pas besoin dâ€™ajouter des vÃ©rifications pour les valeurs nulles lorsquâ€™il sait quâ€™une variable ne lâ€™est pas null.
Nous avons vu des rÃ©sultats prÃ©liminaires trÃ¨s prometteurs. Par exemple, <strong>lâ€™Ã©quipe de Google chargÃ© du projet dart</strong> a constatÃ© une amÃ©lioration des performances de 19% dans un microbenchmark qui Ã©mule les modÃ¨les de rendu typiques du framework Flutter.</p>

<p>Avec Null Safety, vous pouvez raisonner votre code avec plus de confiance. Fini les erreurs de dÃ©rÃ©fÃ©rencement nul lors de lâ€™exÃ©cution. Au lieu de cela, vous obtenez des erreurs statiques lorsque vous codez.
Avec  Null Safety, lâ€™analyseur Dart applique les bonnes pratiques. Par exemple, il sâ€™assure que vous vÃ©rifiez la valeur NULL avant de lire une variable Nullable. Et parce que la  Null Safety de Dart est saine, les compilateurs et les environnements dâ€™exÃ©cution Dart peuvent optimiser les vÃ©rifications internes de null, de sorte que les applications peuvent Ãªtre plus rapides et plus petites.</p>

<p>Les nouveaux opÃ©rateurs et mots - clÃ©s liÃ©s Ã  la sÃ©curitÃ© comprennent nulle ?, !et late. Si vous avez utilisÃ© Kotlin, TypeScript ou C#, la syntaxe de la  Null Safety peut vous sembler familiÃ¨re. Câ€™est par conception: le langage Dart se veut sans surprise.
Vous pouvez essayer la Null Safety dans votre environnement de dÃ©veloppement normal en configurant votre projet pour utiliser un SDK dâ€™aperÃ§u technique.</p>

<p><strong>DÃ©claration de variables avec Null Safety</strong></p>

<p>Si la variable peut avoir la valeur null, ajoutez? Ã  sa dÃ©claration de type:</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart">    <span class="kt">int</span><span class="o">?</span> <span class="n">aNullableInt</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span></code></pre></figure>

<p>Si vous savez quâ€™une variable non nullable sera initialisÃ©e Ã  une valeur non nulle avant dâ€™Ãªtre utilisÃ©e, mais que lâ€™analyseur Dart nâ€™est pas dâ€™accord, insÃ©rez late avant le type de la variable:</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">IntProvider</span> <span class="o">{</span>
  <span class="kd">late</span> <span class="kt">int</span> <span class="n">aRealInt</span><span class="o">;</span>
  
  <span class="n">IntProvider</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">aRealInt</span> <span class="o">=</span> <span class="n">calculate</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p><strong>Le late mot-clÃ© a deux effets:</strong></p>

<p>Lâ€™analyseur ne vous oblige pas Ã  initialiser immÃ©diatement une late variable Ã  une valeur non nulle.
Le runtime initialise paresseusement la late variable. Par exemple, si une variable dâ€™instance non Nullable doit Ãªtre calculÃ©e, lâ€™ajout du late modificateur retarde le calcul jusquâ€™Ã  la premiÃ¨re utilisation de la variable dâ€™instance.</p>

<p><strong>Utiliser des variables et des expressions</strong></p>

<p>Avec la Null Safety, lâ€™analyseur Dart gÃ©nÃ¨re des erreurs lorsquâ€™il trouve une valeur Nullable oÃ¹ une valeur non NULL est requise. Ce nâ€™est pas aussi grave que cela en a lâ€™air: lâ€™analyseur peut souvent reconnaÃ®tre lorsquâ€™une variable ou une expression Ã  lâ€™intÃ©rieur dâ€™une fonction a un type Nullable mais ne peut pas avoir une valeur Null.</p>

<p>Lorsque vous utilisez une variable ou une expression Nullable, veillez Ã  gÃ©rer les valeurs Null. Par exemple, vous pouvez utiliser une if instruction, lâ€™ ??opÃ©rateur ou lâ€™ ?.opÃ©rateur pour gÃ©rer dâ€™Ã©ventuelles valeurs nulles.</p>

<p>Voici un exemple dâ€™utilisation de lâ€™ ??opÃ©rateur pour Ã©viter de dÃ©finir une variable non nullable sur null:</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">aNullableInt</span> <span class="o">??</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// 0 if it's null; otherwise, the integer</span></code></pre></figure>

<p><strong>Voici un code similaire, mais avec une if instruction qui vÃ©rifie la valeur null:</strong></p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kt">int</span> <span class="nf">definitelyInt</span><span class="p">(</span><span class="kt">int</span><span class="o">?</span> <span class="n">aNullableInt</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">aNullableInt</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">aNullableInt</span><span class="o">;</span> <span class="c1">// Can't be null!</span>
<span class="o">}</span></code></pre></figure>

<p>Si vous Ãªtes sÃ»r quâ€™une expression avec un type Nullable nâ€™est pas NULL, vous pouvez ajouter !pour que Dart la traite comme non Nullable:</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kt">int</span><span class="o">?</span> <span class="n">aNullableInt</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">aNullableInt</span><span class="o">!;</span> <span class="c1">// `aNullableInt!` is an int.</span>
<span class="c1">// This throws if aNullableInt is null.</span></code></pre></figure>

<p>Si vous avez besoin de changer le type dâ€™une variable Nullable - au-delÃ  de ce que lâ€™ !opÃ©rateur peut faire - vous pouvez utiliser lâ€™ opÃ©rateur de transtypage (as) . Lâ€™exemple suivant utilise aspour convertir un num?en un int:</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="k">return</span> <span class="nf">maybeNum</span><span class="p">(</span><span class="o">)</span> <span class="k">as</span> <span class="kt">int</span><span class="o">;</span></code></pre></figure>

<p>Une fois que vous avez optÃ© pour la sÃ©curitÃ© null, vous ne pouvez pas utiliser lâ€™ opÃ©rateur dâ€™accÃ¨s. aux membres ( ) si lâ€™opÃ©rande peut Ãªtre nul. Au lieu de cela, vous pouvez utiliser la version compatible NULL de cet opÃ©rateur ( ?.):</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kt">double</span><span class="o">?</span> <span class="n">d</span><span class="o">;</span>  
<span class="n">print</span><span class="o">(</span><span class="n">d</span><span class="o">?.</span><span class="na">floor</span><span class="o">());</span> <span class="c1">// Uses `?.` instead of `.` to invoke `floor()`.</span></code></pre></figure>

<p><strong>Rendre Null Safety plus facile Ã  utiliser</strong></p>

<p>Notez Ã  quel point Dart est assez intelligent pour rÃ©aliser quâ€™au moment oÃ¹ nous transmettons cette if instruction, la loudnessvariable ne peut pas lâ€™ Ãªtre null. Et donc Dart nous permet dâ€™appeler la clamp()mÃ©thode sans sauter Ã  travers les cerceaux. Cette commoditÃ© est rendue possible par quelque chose appelÃ© analyse de flux : lâ€™analyseur Dart parcourt votre code comme sâ€™il lâ€™exÃ©cutait, trouvant automatiquement des informations supplÃ©mentaires sur votre code.
Voici un autre exemple, qui montre un cas oÃ¹ Dart peut Ãªtre sÃ»r quâ€™une variable est non nulle car nous lui affectons toujours une valeur non nulle:</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kt">int</span> <span class="nf">sign</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// The result is non-nullable.</span>
  <span class="kt">int</span> <span class="n">result</span><span class="o">;</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="n">result</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="c1">// By this point, Dart knows the result cannot be null.</span>
  <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
<span class="o">}</span></code></pre></figure>

<p>Si vous supprimez lâ€™une des affectations ci-dessus (par exemple, en supprimant la result = -1;ligne), Dart ne peut pas garantir que ce resultsera non nul: vous obtiendrez une erreur statique et votre code ne sera pas compilÃ©.
Lâ€™analyse de flux ne fonctionne quâ€™Ã  lâ€™intÃ©rieur des fonctions. Si vous avez une variable globale ou un champ de classe, Dart ne peut pas garantir Ã  quel moment la valeur lui sera attribuÃ©e. Dart ne peut pas modÃ©liser le flux de lâ€™ensemble de votre application. Pour cette raison, vous pouvez utiliser le nouveau late mot-clÃ© lorsque vous savez quâ€™une variable sera non nulle avant de la lire pour la premiÃ¨re fois, mais que vous ne pouvez pas lâ€™initialiser immÃ©diatement.</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">Goo</span> <span class="o">{</span>
  <span class="kd">late</span> <span class="n">Viscosity</span> <span class="n">v</span><span class="o">;</span>
  <span class="n">Goo</span><span class="o">(</span><span class="n">Material</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">v</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">computeViscosity</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Notez que ce v nâ€™est pas nul, bien quâ€™il dÃ©marre non initialisÃ©. Dart vous fait confiance que vous nâ€™essaierez pas de lire v avant de lui attribuer une valeur non nulle et que votre code se compile sans erreur.</p>

<p><strong>Conclusion :</strong></p>

<p><strong>Bravooo!!!</strong> vous Ãªtes dÃ©jÃ  Ã  lâ€™aise avec Null Safety.</p>

<p><strong>Sound null safety</strong> est une caractÃ©ristique distinctive de Dart qui vous aide Ã  Ã©crire du code moins sujet aux erreurs et Ã  obtenir de meilleures performances. Jâ€™espÃ©rons que vous allez expÃ©rimenter la fonctionnalitÃ© . Meric pour votre temps</p>]]></content><author><name>AdamMusa</name></author><summary type="html"><![CDATA[AdamMusa Follow 2,Juin 2020 16min]]></summary></entry><entry><title type="html">Pourquoi Flutter ?</title><link href="http://localhost:4000/2020/06/02/pourquoi-flutter.html" rel="alternate" type="text/html" title="Pourquoi Flutter ?" /><published>2020-06-02T03:00:03+01:00</published><updated>2020-06-02T03:00:03+01:00</updated><id>http://localhost:4000/2020/06/02/pourquoi-flutter</id><content type="html" xml:base="http://localhost:4000/2020/06/02/pourquoi-flutter.html"><![CDATA[<p><img src="/assets/images/dart.png" alt="alt text" style="float:left; padding:16px;border-radius:50%;height:100px;" />
<br /> AdamMusa <a href="https://twitter.com/AdamMusaAly/">Follow</a><br />
2,Juin 2020 16min</p>

<p>De nos jours, les utilisateurs de mobiles sâ€™attendent Ã  ce que leurs applications aient un design magnifique, des animations fluides et des performances exceptionnelles. Les dÃ©veloppeurs doivent crÃ©er une nouvelle fonctionnalitÃ© plus rapidement que jamais, sans compromettre la qualitÃ© ni les performances. Câ€™est pourquoi Google a lancÃ© flutter . 
Quâ€™est-ce que Flutter?
Flutter est un framework dâ€™interface utilisateur mobile, gratuit et a code ouvert (open source) qui offre aux dÃ©veloppeurs un moyen rapide et expressif de crÃ©er des applications web, desktop et mobile(iOS et Android natives) Ã  partir dâ€™une base de code unique . Flutter est sorti en mai 2017. Il a Ã©tÃ© Ã©crit en utilisant le moteur graphique C, C ++, Dart et Skia. Flutter est un framework Dart, et Dart est un langage de programmation orientÃ© objet Ã©crit par Google. Flutter est le seul framework avec SDK mobile qui fournit des styles rÃ©actifs sans passer par un pont Javascript.</p>

<p><img src="/assets/images/flutter-gif.gif" alt="alt text" /></p>

<p><strong>Pourquoi Flutter?</strong></p>

<p><strong>1- DÃ©veloppement rapide</strong><br /></p>

<p>Flutter est conÃ§u pour une vitesse de dÃ©veloppement phenominale.Le rechargement Ã  chaud communÃ©ment appelÃ© hot reaload avec Ã©tat vous permet de changer votre code et de le voir prendre vie en moins dâ€™une seconde sans perdre lâ€™Ã©tat de lâ€™application. Flutter est Ã©galement livrÃ© avec un paquet de widgets, trÃ¨s riches et personnalisables, tout construits Ã  partir dâ€™un framework rÃ©actif et modern</p>

<p><strong>2. Interface utilisateur Expressive + Flexible</strong><br /></p>

<p>Les ComposantsÂ de Flutter sont tous  des widgets, le rendu, lâ€™animation et les gestes dans ce cadre pourÂ  vous permettre de contrÃ´ler entiÃ¨rement chaque pixel de lâ€™Ã©cran.Cela signifie que vous avez la possibilitÃ© de crÃ©er une conception personnalisÃ©e.</p>

<p><strong>3. Applications natives pour Android et iOS</strong><br /></p>

<p>Les applications Flutter respectent les conventions de la plateforme et les dÃ©tails de lâ€™interface telle que le dÃ©filement, la navigation, les icÃ´nes, les polices de caractÃ¨res, etc.Câ€™est pourquoi les applications conÃ§ues avecÂ  Flutter passent sur APPSTORE et GOOGLE PLAY STORE.</p>

<p><strong>4. Recharge Ã  chaud</strong><br /></p>

<p>Dans Flutter, vous pouvez changer lâ€™Ã©tat de votre application en un clique communement appellÃ© hot reload , comme vous les faites sur le Web, appuyez simplement sur une actualisation et vos codes sont Ã©galement actualisÃ©s.</p>

<p><img src="/assets/images/hot-reload.gif" alt="alt text" /></p>

<p><strong>5. Haute performance</strong><br /></p>

<p>Flutter ne nÃ©cessite pas de pont Javascript et la vitesse est beaucoup plus rapide.</p>

<p><strong>6. Utiliser Dart comme un langage de programmation</strong><br />
Flutter est Ã©crit en Dart et qui contribue Ã  lâ€™efficacitÃ© du flux de dÃ©veloppement dâ€™applications. Dart est un langage trÃ¨s simple Ã  prendre en main avec une syntaxe simple et cool.</p>

<p><strong>7. Respecte la fidÃ©litÃ© de lâ€™interface utilisateur</strong><br /></p>

<p>Lorsque vous utilisez Flutter, vous pouvez obtenir une expÃ©rience IOS complÃ¨te ou une expÃ©rience Android.</p>

<p><strong>9. Le kit de widgets personnalisable</strong><br /></p>

<p>Flutter utilise material design par dÃ©faut pour crÃ©er une trÃ¨s jolie et puissante interface utilisateur expressive Ã©crire en flutter revient Ã  indiquer un chemin pour Monsieur x car câ€™est trop verbal</p>

<p><strong>Conclusion</strong>Â :  Flutter est un puissant boit Ã  outils, donc il nous faut apprendre Ã  assembler le puzzle pour faire une magnifique et puissante application multiplate-forme. En plus trop Ã©conomique pour une entreprise sinon il engagera des dÃ©veloppeurs Android &amp; iOS pour rÃ©aliser une mÃªme application pour deux plateformes diffÃ©rentes</p>]]></content><author><name>AdamMusa</name></author><summary type="html"><![CDATA[AdamMusa Follow 2,Juin 2020 16min]]></summary></entry></feed>